# Generated by Django 5.0.3 on 2024-03-31 02:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.manager
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Enter the full name.", max_length=255),
                ),
                (
                    "short_name",
                    models.CharField(help_text="Enter the short name.", max_length=255),
                ),
                (
                    "motto",
                    models.CharField(
                        help_text="Enter the company motto.", max_length=255
                    ),
                ),
                (
                    "primary_email",
                    models.EmailField(
                        help_text="Enter the primary contact email.", max_length=254
                    ),
                ),
                (
                    "secondary_email",
                    models.EmailField(
                        blank=True,
                        help_text="Enter the secondary contact email.",
                        max_length=254,
                    ),
                ),
                (
                    "primary_phone",
                    models.CharField(
                        help_text="Enter the primary contact phone number.",
                        max_length=255,
                    ),
                ),
                (
                    "secondary_phone",
                    models.CharField(
                        blank=True,
                        help_text="Enter the secondary contact phone number.",
                        max_length=255,
                    ),
                ),
                (
                    "building",
                    models.CharField(
                        blank=True,
                        help_text="Enter the location building",
                        max_length=255,
                    ),
                ),
                (
                    "street",
                    models.CharField(
                        blank=True,
                        help_text="Enter the location street",
                        max_length=255,
                    ),
                ),
                (
                    "PO_box",
                    models.CharField(
                        blank=True, help_text="Enter the P.O Box", max_length=255
                    ),
                ),
                (
                    "city_name",
                    models.CharField(
                        blank=True, help_text="Enter the city name", max_length=255
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True, help_text="Enter the zip code", max_length=255
                    ),
                ),
                (
                    "open_days",
                    models.CharField(
                        blank=True, help_text="e.g Monday - Friday", max_length=255
                    ),
                ),
                (
                    "open_hours",
                    models.CharField(
                        blank=True, help_text="e.g 8:15AM - 05:00PM", max_length=255
                    ),
                ),
                (
                    "twitter_x",
                    models.URLField(
                        blank=True, help_text="Enter the X account url", max_length=255
                    ),
                ),
                (
                    "facebook",
                    models.URLField(
                        blank=True,
                        help_text="Enter the facebook account url",
                        max_length=255,
                    ),
                ),
                (
                    "instagram",
                    models.URLField(
                        blank=True,
                        help_text="Enter the Instagram account url",
                        max_length=255,
                    ),
                ),
                (
                    "linkedin",
                    models.URLField(
                        blank=True,
                        help_text="Enter the Linkedin account url",
                        max_length=255,
                    ),
                ),
                (
                    "tiktok",
                    models.CharField(
                        blank=True,
                        help_text="Enter the organization's tiktok account url (Not required).",
                        max_length=255,
                    ),
                ),
                (
                    "whatsapp",
                    models.URLField(
                        blank=True,
                        help_text="Enter the Whatsapp url in the format 'https://wa.me/254700000000'. Replace with appropriate phone number",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Company Information",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[("ADMIN", "Admin"), ("CLIENT", "Client")],
                        max_length=50,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        default="defaults/default_profile.jpg",
                        help_text="Upload an image that is 600x600",
                        upload_to="students/",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Client",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("home.user",),
            managers=[
                ("clients", django.db.models.manager.Manager()),
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
